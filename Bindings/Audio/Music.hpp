#pragma once

#include "BaseHeader.hpp"

void Music(nb::module_ &m)
{
    nb::class_<sf::Music>(m, "Music")
        .def(nb::init<>())
        .def(nb::init<const std::filesystem::path &>(), nb::arg("filename"))
        .def("__init__", [](sf::Music *self, nb::bytes data)
             {	const void* ptr = data.data();
				std::size_t size = data.size();
				new (self) sf::Music(ptr, size); }, nb::arg("data"))
        .def(nb::init<sf::InputStream &>(), nb::arg("stream"))
        .def(nb::init<sf::Music &&>())
        .def("openFromFile", &sf::Music::openFromFile, nb::arg("filename"))
        .def("openFromMemory", [](sf::Music &self, nb::bytes data)
             {
                 const void *ptr = data.data();
                 std::size_t size = data.size();
                 return self.openFromMemory(ptr, size); }, nb::arg("data"))
        .def("openFromStream", &sf::Music::openFromStream, nb::arg("stream"))
        .def("getDuration", &sf::Music::getDuration)
        .def("getLoopPoints", &sf::Music::getLoopPoints)
        .def("setLoopPoints", &sf::Music::setLoopPoints, nb::arg("timePoints"))
        .def("play", &sf::Music::play)
        .def("pause", &sf::Music::pause)
        .def("stop", &sf::Music::stop)
        .def("getChannelCount", &sf::Music::getChannelCount)
        .def("getSampleRate", &sf::Music::getSampleRate)
        .def("getChannelMap", &sf::Music::getChannelMap)
        .def("getStatus", &sf::Music::getStatus)
        .def("setPlayingOffset", &sf::Music::setPlayingOffset, nb::arg("timeOffset"))
        .def("getPlayingOffset", &sf::Music::getPlayingOffset)
        .def("setLooping", &sf::Music::setLooping, nb::arg("loop"))
        .def("isLooping", &sf::Music::isLooping)
        .def("setEffectsProcessor", &sf::Music::setEffectProcessor, nb::arg("effectProcessor"))
        .def("setPitch", &sf::Music::setPitch, nb::arg("pitch"))
        .def("setPan", &sf::Music::setPan, nb::arg("pan"))
        .def("setVolume", &sf::Music::setVolume, nb::arg("volume"))
        .def("setSpatializationEnabled", &sf::Music::setSpatializationEnabled, nb::arg("enabled"))
        .def("setPosition", &sf::Music::setPosition, nb::arg("position"))
        .def("setDirection", &sf::Music::setDirection, nb::arg("direction"))
        .def("setCone", &sf::Music::setCone, nb::arg("cone"))
        .def("setVelocity", &sf::Music::setVelocity, nb::arg("velocity"))
        .def("setDopplerFactor", &sf::Music::setDopplerFactor, nb::arg("factor"))
        .def("setDirectionalAttenuationFactor", &sf::Music::setDirectionalAttenuationFactor, nb::arg("factor"))
        .def("setRelativeToListener", &sf::Music::setRelativeToListener, nb::arg("relative"))
        .def("setMinDistance", &sf::Music::setMinDistance, nb::arg("distance"))
        .def("setMaxDistance", &sf::Music::setMaxDistance, nb::arg("distance"))
        .def("setMinGain", &sf::Music::setMinGain, nb::arg("gain"))
        .def("setMaxGain", &sf::Music::setMaxGain, nb::arg("gain"))
        .def("setAttenuation", &sf::Music::setAttenuation, nb::arg("attenuation"))
        .def("getPitch", &sf::Music::getPitch)
        .def("getPan", &sf::Music::getPan)
        .def("getVolume", &sf::Music::getVolume)
        .def("isSpatializationEnabled", &sf::Music::isSpatializationEnabled)
        .def("getPosition", &sf::Music::getPosition)
        .def("getDirection", &sf::Music::getDirection)
        .def("getCone", &sf::Music::getCone)
        .def("getVelocity", &sf::Music::getVelocity)
        .def("getDopplerFactor", &sf::Music::getDopplerFactor)
        .def("getDirectionalAttenuationFactor", &sf::Music::getDirectionalAttenuationFactor)
        .def("isRelativeToListener", &sf::Music::isRelativeToListener)
        .def("getMinDistance", &sf::Music::getMinDistance)
        .def("getMaxDistance", &sf::Music::getMaxDistance)
        .def("getMinGain", &sf::Music::getMinGain)
        .def("getMaxGain", &sf::Music::getMaxGain)
        .def("getAttenuation", &sf::Music::getAttenuation);
}