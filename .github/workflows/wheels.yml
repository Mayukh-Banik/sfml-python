name: Wheel
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - main
  release:
    types:
      - published

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.13"]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            ninja-build \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev \
            mesa-common-dev \
            libx11-dev \
            libfreetype6-dev \
            libxext-dev \
            libudev-dev \
            libogg-dev \
            libvorbis-dev \
            libflac-dev \
            libopenal-dev

    #   - name: Install Windows system dependencies
    #     if: runner.os == 'Windows'
    #     run: |
    #       choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
    #       choco install ninja -y

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

    #   - name: List built artifacts
    #     run: |
    #       if [ "${{ runner.os }}" == "Linux" ]; then
    #         ls -la dist/
    #       else
    #         dir dist
    #       fi

      - name: Test local installation
        run: |
          python -m pip install dist/*.whl
          python -c "import pySFML; print('Successfully imported pySFML')"

      - name: Upload built artifacts
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-artifact@v4
        with:
          name: wheel-dist-${{ matrix.os }}
          path: dist/

  upload_all:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel-dist-ubuntu-latest
          path: dist/linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel-dist-windows-latest
          path: dist/windows

      - name: Combine all wheels
        run: |
          mkdir -p dist/all
          cp dist/linux/* dist/all/
          cp dist/windows/* dist/all/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
