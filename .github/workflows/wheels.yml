# name: Wheel
# on:
#   workflow_dispatch:
#   pull_request:
#   release:
#     types:
#       - published

# jobs:
#   build:
#     name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, windows-latest, macos-latest]
#         python-version: ["3.13"]
    
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           submodules: true
#           fetch-depth: 0

#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Install Linux system dependencies
#         if: runner.os == 'Linux'
#         run: |
#           sudo apt update
#           sudo apt install -y \
#             build-essential \
#             cmake \
#             ninja-build \
#             libxrandr-dev \
#             libxcursor-dev \
#             libxi-dev \
#             mesa-common-dev \
#             libx11-dev \
#             libfreetype6-dev \
#             libxext-dev \
#             libudev-dev \
#             libogg-dev \
#             libvorbis-dev \
#             libflac-dev \
#             libopenal-dev

#       - name: Install Python build dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install build

#       - name: Build package
#         run: python -m build

#       - name: Test local installation
#         shell: python
#         run: |
#           import glob, subprocess, sys
#           wheel = glob.glob('dist/*.whl')[0]
#           subprocess.check_call([sys.executable, '-m', 'pip', 'install', wheel])
#           import pySFML; print('Successfully imported pySFML')

#       - name: Upload built artifacts
#         if: github.event_name == 'release' && github.event.action == 'published'
#         uses: actions/upload-artifact@v4
#         with:
#           name: wheel-dist-${{ matrix.os }}
#           path: dist/

#   upload_all:
#     name: Publish to Test PyPI
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.event_name == 'release' && github.event.action == 'published'
#     steps:
#       - uses: actions/checkout@v4

#       - name: Download Linux artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: wheel-dist-ubuntu-latest
#           path: dist/linux

#       - name: Download Windows artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: wheel-dist-windows-latest
#           path: dist/windows

#       - name: Combine all wheels
#         run: |
#           mkdir -p dist/all
#           cp dist/linux/* dist/all/
#           cp dist/windows/* dist/all/

#       - name: Publish to Test PyPI
#         uses: pypa/gh-action-pypi-publish@v1.5.2
#         with:
#           user: __token__
#           password: ${{ secrets.TEST_PYPI_PASSWORD }}
#           repository_url: https://test.pypi.org/legacy/

name: Wheel
on:
  workflow_dispatch:
  pull_request:
  release:
    types:
      - published

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            ninja-build \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev \
            mesa-common-dev \
            libx11-dev \
            libfreetype6-dev \
            libxext-dev \
            libudev-dev \
            libogg-dev \
            libvorbis-dev \
            libflac-dev \
            libopenal-dev

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Upload built artifacts
        run: |
          python -m twine upload --repository testpypi dist/* -u __token__ -p pypi-AgENdGVzdC5weXBpLm9yZwIkNzIzZmVkMzAtOTIwOS00Njc1LWJjOTgtN2FjNTRkNTllMGMxAAIqWzMsIjIzMjBiZjhlLTZmMjAtNGY2Yi1iMGE4LTQyY2Y2N2U2YTBjNiJdAAAGIDR-c4K94U8MGq2PSTqZ2xETWwTMECMox1D05rqZpMwv
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheel-dist-${{ matrix.os }}
  #         path: dist/

  # upload_all:
  #   name: Publish to Test PyPI
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: wheel-dist-ubuntu-latest
  #         path: dist/linux

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: wheel-dist-windows-latest
  #         path: dist/windows

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: wheel-dist-macos-latest
  #         path: dist/macos

  #     - name: Combine all wheels
  #       run: |
  #         mkdir -p dist/all
  #         cp dist/linux/* dist/all/
  #         cp dist/windows/* dist/all/
  #         cp dist/macos/* dist/all/

  #     - name: Publish to Test PyPI
  #       uses: pypa/gh-action-pypi-publish@v1.5.2
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_PASSWORD }}
  #         repository_url: https://test.pypi.org/legacy/
  #         packages_dir: dist/all
